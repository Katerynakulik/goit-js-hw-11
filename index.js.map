{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = '51454190-e114164169ef9dafb1528e77f';\n\nfunction getImagesByQuery(query) {\n  const searchParams = {\n    key: API_KEY,\n    q: query,\n    image_type: \"photo\",\n    orientation: \"horizontal\",\n    safesearch: true,\n  };\n  return axios\n    .get(BASE_URL, {params: searchParams})\n    .then((response) => response.data)\n    .catch(error => {\n      console.error(\"Error fetching images:\",error);\n      throw new Error(\"Sorry, there are no images matching your search query. Please try again!\")\n    });\n};\nexport {getImagesByQuery};","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nconst container = document.querySelector('.gallery');\nexport function createGallery(images) {\n  function itemInsert({\n    webformatURL,\n    largeImageURL,\n    tags,\n    likes,\n    views,\n    comments,\n    downloads,\n  }) {\n    return `<li class=\"gallery-item\">\n        <a class=\"gallery-link\" href=\"${largeImageURL}\">\n          <img class=\"gallery-image\" src=\"${webformatURL}\" alt=\"${tags}\" />\n        </a>\n        <div class=\"image-describe\">\n        <div class=\"img-info\">\n          <b>Likes</b>\n          <p>${likes}</p>\n        </div>\n        <div class=\"img-info\">\n          <b>Views</b>\n          <p>${views}</p>\n        </div>\n        <div class=\"img-info\">\n          <b>Comments</b>\n          <p>${comments}</p>\n        </div>\n        <div class=\"img-info\">\n          <b>Downloads</b>\n          <p>${downloads}</p>\n        </div>\n        </div>\n      </li>\n    `;\n  }\n  const newGallery = images.map(itemInsert).join('');\n  container.insertAdjacentHTML('beforeend', newGallery);\n\n  const lightbox = new SimpleLightbox('.gallery a', {\n    captionsData: 'alt',\n    captionDelay: 250,\n    captionPosition: 'bottom',\n  });\n  lightbox.refresh();\n};\n\nexport function clearGallery(){\n    container.innerHTML=\"\";\n};\n export function showLoader(){\n    const loader= document.querySelector(\".loader\");\n    loader.classList.remove(\"visuallyhidden\");\n };\n  export function hideLoader(){\n    const loader= document.querySelector(\".loader\");\n    loader.classList.add(\"visuallyhidden\");\n };\n\nconsole.log(\"mygallery\", container);","import {getImagesByQuery} from './js/pixabay-api';\nimport {createGallery,\n    clearGallery,\n    showLoader,\n    hideLoader\n} from './js/render-functions.js';\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst myForm= document.querySelector(\".form\");\nconst userInput = document.querySelector('input[name=\"search-text\"]');\n\nmyForm.addEventListener(\"submit\", onSubmit);\nasync function onSubmit(event){\n    event.preventDefault();\n    const query = userInput.value.trim();\n    if (query===\"\"){\n        myForm.reset();\n        iziToast.warning({\n            title: 'Error',\n            message: 'Search field cannot be empty!',\n            position: \"topRight\",\n        })\n    return;}\n    clearGallery();\n    showLoader();\n    try {\n        const myData = await getImagesByQuery(query);    \n        if (myData.hits.length === 0){\n            iziToast.info({\n                    timeout: 7000,\n                    overlay: true,\n                    displayMode: 'once',\n                    title: 'Try another one',\n                    message: '‚ùå Sorry, there are no images matching your search query. Please try again!',\n                    position: 'topright',\n            })\n    }else{\n        createGallery(myData.hits);\n    }\n        }catch(error){\n            iziToast.error({\n                title: 'Error',\n                message: 'There is some error, please try another time',\n                position: \"topRight\",\n            });\n        }finally{\n            hideLoader();\n            myForm.reset();\n        }\n    }"],"names":["BASE_URL","API_KEY","getImagesByQuery","query","searchParams","axios","response","error","container","createGallery","images","itemInsert","webformatURL","largeImageURL","tags","likes","views","comments","downloads","newGallery","SimpleLightbox","clearGallery","showLoader","hideLoader","myForm","userInput","onSubmit","event","iziToast","myData"],"mappings":"owBAEA,MAAMA,EAAW,2BACXC,EAAU,qCAEhB,SAASC,EAAiBC,EAAO,CAC/B,MAAMC,EAAe,CACnB,IAAKH,EACL,EAAGE,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EAChB,EACE,OAAOE,EACJ,IAAIL,EAAU,CAAC,OAAQI,CAAY,CAAC,EACpC,KAAME,GAAaA,EAAS,IAAI,EAChC,MAAMC,GAAS,CACd,cAAQ,MAAM,yBAAyBA,CAAK,EACtC,IAAI,MAAM,0EAA0E,CAC5F,CAAC,CACL,CClBA,MAAMC,EAAY,SAAS,cAAc,UAAU,EAC5C,SAASC,EAAcC,EAAQ,CACpC,SAASC,EAAW,CAClB,aAAAC,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACJ,EAAK,CACD,MAAO;AAAA,wCAC6BL,CAAa;AAAA,4CACTD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA,eAKvDC,CAAK;AAAA;AAAA;AAAA;AAAA,eAILC,CAAK;AAAA;AAAA;AAAA;AAAA,eAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,eAIRC,CAAS;AAAA;AAAA;AAAA;AAAA,KAKtB,CACA,MAAMC,EAAaT,EAAO,IAAIC,CAAU,EAAE,KAAK,EAAE,EACjDH,EAAU,mBAAmB,YAAaW,CAAU,EAEnC,IAAIC,EAAe,aAAc,CAChD,aAAc,MACd,aAAc,IACd,gBAAiB,QACrB,CAAG,EACQ,QAAO,CAClB,CAEO,SAASC,GAAc,CAC1Bb,EAAU,UAAU,EACxB,CACQ,SAASc,GAAY,CACX,SAAS,cAAc,SAAS,EACvC,UAAU,OAAO,gBAAgB,CAC3C,CACQ,SAASC,GAAY,CACZ,SAAS,cAAc,SAAS,EACvC,UAAU,IAAI,gBAAgB,CACxC,CAED,QAAQ,IAAI,YAAaf,CAAS,ECnDlC,MAAMgB,EAAQ,SAAS,cAAc,OAAO,EACtCC,EAAY,SAAS,cAAc,2BAA2B,EAEpED,EAAO,iBAAiB,SAAUE,CAAQ,EAC1C,eAAeA,EAASC,EAAM,CAC1BA,EAAM,eAAc,EACpB,MAAMxB,EAAQsB,EAAU,MAAM,KAAI,EAClC,GAAItB,IAAQ,GAAG,CACXqB,EAAO,MAAK,EACZI,EAAS,QAAQ,CACb,MAAO,QACP,QAAS,gCACT,SAAU,UACtB,CAAS,EACL,MAAO,CACPP,EAAY,EACZC,EAAU,EACV,GAAI,CACA,MAAMO,EAAS,MAAM3B,EAAiBC,CAAK,EACvC0B,EAAO,KAAK,SAAW,EACvBD,EAAS,KAAK,CACN,QAAS,IACT,QAAS,GACT,YAAa,OACb,MAAO,kBACP,QAAS,6EACT,SAAU,UAC9B,CAAa,EAELnB,EAAcoB,EAAO,IAAI,CAEzB,MAAa,CACTD,EAAS,MAAM,CACX,MAAO,QACP,QAAS,+CACT,SAAU,UAC1B,CAAa,CACL,QAAC,CACGL,EAAU,EACVC,EAAO,MAAK,CAChB,CACJ"}